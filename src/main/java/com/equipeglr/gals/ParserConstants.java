package com.equipeglr.gals;

public interface ParserConstants {
    int START_SYMBOL = 47;

    int FIRST_NON_TERMINAL    = 47;
    int FIRST_SEMANTIC_ACTION = 82;

    int[][] PARSER_TABLE = {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  1, -1, -1, -1, -1, -1,  1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  6, -1, -1, -1, -1, -1,  6, -1,  6, -1, -1, -1, -1, -1,  6, -1, -1,  6,  6,  6, -1, -1,  4,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  2, -1, -1, -1, -1, -1,  2, -1,  2, -1, -1, -1, -1, -1,  2, -1, -1,  2,  2,  2, -1, -1,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 15, -1, 14, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 20, -1, 18, -1, -1, -1, -1, 17, -1, -1, 16, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 27, -1, -1, -1, -1, -1, 27, -1, 27, -1, -1, -1, -1, -1, 27, -1, -1, 27, 27, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 29, -1, -1, -1, -1, -1, 29, -1, 29, 28, 28, -1, -1, -1, 29, -1, -1, 29, 29, 29, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 30, -1, -1, -1, -1, -1, 35, -1, 34, -1, -1, -1, -1, -1, 33, -1, -1, 32, 32, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 39, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 42, 42, 42, 42, 42, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, 42 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 49, 49, 49, 49, 49, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, 49 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 52, -1 },
        { -1, 53, 53, 53, 53, 53, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 53, 53, -1, -1, -1, -1, -1, 56 },
        { -1, 57, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, 57, 57, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, -1, 58, -1, -1, 59, 59, 59, 59, -1, -1, -1, -1, -1, 58, 58, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 64, 64, 64, 64, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, -1, -1, 65, -1, -1, 65, 65, 65, 65, 66, 67, -1, -1, -1, 65, 65, -1 },
        { -1, 68, 68, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, 68, 68, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 69, -1, -1, 69, -1, -1, 69, 69, 69, 69, 69, 69, 70, 71, 72, 69, 69, -1 },
        { -1, 73, 74, 75, 76, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, 79, 80, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = {
        { 15, 18, 33, 48, 34 },
        { 49, 50 },
        { 48 },
        {  0 },
        { 51 },
        { 54 },
        { 61 },
        { 24, 55, 52 },
        { 27, 57, 53 },
        { 30, 58, 29 },
        { 29 },
        { 30, 58, 29 },
        { 25, 55, 52 },
        {  2, 56 },
        {  0 },
        { 28, 55 },
        { 17 },
        { 14 },
        {  9 },
        { 22 },
        {  7 },
        {  3 },
        {  4 },
        {  5 },
        {  6 },
        { 23 },
        { 13 },
        { 61, 60 },
        {  0 },
        { 59 },
        { 62 },
        { 63 },
        { 65 },
        { 68 },
        { 70 },
        {  8, 29 },
        {  2, 30, 71, 29 },
        { 21, 31, 64, 55, 32, 29 },
        {  6, 28 },
        {  0 },
        { 19, 31, 66, 32, 29 },
        { 20, 31, 66, 32, 29 },
        { 71, 67 },
        {  0 },
        { 28, 66 },
        { 16, 31, 71, 32, 59, 69, 12, 29 },
        { 11, 59 },
        {  0 },
        { 10, 59, 26, 31, 71, 32, 12, 29 },
        { 73, 72 },
        {  0 },
        { 44, 73, 72 },
        { 45, 73, 72 },
        { 74 },
        { 23 },
        { 13 },
        { 46, 73 },
        { 77, 75 },
        {  0 },
        { 76, 77 },
        { 35 },
        { 36 },
        { 37 },
        { 38 },
        { 79, 78 },
        {  0 },
        { 39, 79, 78 },
        { 40, 79, 78 },
        { 81, 80 },
        {  0 },
        { 41, 81, 80 },
        { 42, 81, 80 },
        { 43, 81, 80 },
        {  2 },
        {  3 },
        {  4 },
        {  5 },
        {  6 },
        { 31, 71, 32 },
        { 39, 81 },
        { 40, 81 }
    };

    String[] PARSER_ERROR = {
        "",
        "EOF",//"Era esperado fim de programa",
        "id",//"Era esperado id",
        "constante do tipo int",//"Era esperado cint",
        "constante do tipo float",//"Era esperado cfloat",
        "constante do tipo char",//"Era esperado cchar",
        "constante do tipo string",//"Era esperado cstring",
        "boolean",//"Era esperado pr_boolean",
        "break",//"Era esperado pr_break",
        "char",//"Era esperado pr_char",
        "do",//"Era esperado pr_do",
        "else",//"Era esperado pr_else",
        "end",//"Era esperado pr_end",
        "false",//"Era esperado pr_false",
        "float",//"Era esperado pr_float",
        "fun",//"Era esperado pr_fun",
        "if",//"Era esperado pr_if",
        "int",//"Era esperado pr_int",
        "main",//"Era esperado pr_main",
        "print",//"Era esperado pr_print",
        "println",//"Era esperado pr_println",
        "readln",//"Era esperado pr_readln",
        "string",//"Era esperado pr_string",
        "true",//"Era esperado pr_true",
        "val",//"Era esperado pr_val",
        "var",//"Era esperado pr_var",
        "while",//"Era esperado pr_while",
        ":",//"Era esperado \":\"",
        ",",//"Era esperado \",\"",
        ";",//"Era esperado \";\"",
        "=",//"Era esperado \"=\"",
        "(",//"Era esperado \"(\"",
        ")",//"Era esperado \")\"",
        "{",//"Era esperado \"{\"",
        "}",//"Era esperado \"}\"",
        "==",//"Era esperado \"==\"",
        "!=",//"Era esperado \"!=\"",
        "<",//"Era esperado \"<\"",
        ">",//"Era esperado \">\"",
        "+",//"Era esperado \"+\"",
        "-",//"Era esperado \"-\"",
        "*",//"Era esperado \"*\"",
        "/",//"Era esperado \"/\"",
        "%",//"Era esperado \"%\"",
        "&&",//"Era esperado \"&&\"",
        "||",//"Era esperado \"||\"",
        "!",//"Era esperado \"!\"",
        "fun",//"<forma_geral_problema> inválido",
        "instrução",// "<lista_de_instrucoes> inválido",
        "instrução",//"<repete_instrucoes> inválido",
        "instrução",//"<tem_mais_instrucao> inválido",
        "constante",//"<declaracao_constantes> inválido",
        "insancia",//"<instancia> inválido",
        "; =",//"<declaracao_tipo> inválido",
        "declaracao var",//"<declaracao_variaveis> inválido",
        "indentificador",//"<lista_id> inválido",
        ":",//"<id> inválido",
        "tipo",// "<tipo> inválido",
        "valor",//"<valor> inválido",
        "comando",//"<lista_de_comandos> inválido",
        "comando",//"<repete_comando> inválido",
        "comando",//"<comando> inválido",
        "<atribuicao> inválido",
        "<entrada_dados> inválido",
        "<atribui_string> inválido",
        "<saida_dados> inválido",
        "expressão",//"<lista_de_expressao> inválido",
        "expressão",//"<repete_expressao> inválido",
        "<selecao> inválido",
        "<selecao_opcional> inválido",
        "<repeticao> inválido",
        "expressão",//"<expressao> inválido",
        "expressão",//"<expressao_> inválido",
        "expressão",//"<elemento> inválido",
        "expressão",//"<relacional> inválido",
        "expressão",//"<relacional_> inválido",
        "<operador_relacional> inválido",
        "expressão",//"<aritmetica> inválido",
        "expressão",//"<aritmetica_> inválido",
        "expressão",//"<termo> inválido",
        "expressão",//"<termo_> inválido",
        "expressão",//"<fator> inválido"
    };
}
